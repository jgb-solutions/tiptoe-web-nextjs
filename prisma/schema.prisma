// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  avatar        String?
  active        Boolean   @default(false)
  admin         Boolean   @default(false)
  first_login   Boolean   @default(true)
  user_type     String?
  is_model      Boolean   @default(false)
  telephone     String?
  gender        String?
  model         Model?
  favorites     Photo[]
  pmLastFour    String?
  isNew         Boolean   @default(false)

  accounts Account[]
  sessions Session[]
  modelId  String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Model {
  id                 String        @id @default(cuid())
  stage_name         String
  bucket             String
  poster             String
  hash               String
  price              String
  bio                String
  facebook           String
  instagram          String
  twitter            String
  youtube            String
  verified           Boolean
  followed_by_me     Boolean
  new_follower_count Int
  userId             String        @unique
  user               User          @relation(fields: [userId], references: [id])
  photos_count       Int
  followers_count    Int
  photos             Photo[]
  modelAccountData   ModelAccount?
}

model ModelAccount {
  id      String @id @default(cuid())
  modelId String @unique
  model   Model  @relation(fields: [modelId], references: [id])
  account Int
  balance Int
}

model Photo {
  id           String   @id @default(cuid())
  uri          String?
  bucket       String?
  caption      String
  detail       String
  featured     Boolean  @default(false)
  for_my_model Boolean  @default(false)
  hash         String
  type         String
  publish      Boolean  @default(false)
  category     Category @relation(fields: [categoryId], references: [id])
  model        Model    @relation(fields: [modelId], references: [id])
  users        User[]
  categoryId   String
  modelId      String
}

model Category {
  id     String  @id @default(cuid())
  name   String
  slug   String
  photos Photo[]
}
